plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
}

archivesBaseName = project.archives_base_name
version = "${project.version}+${libs.versions.minecraft.get()}"
group = project.maven_group

repositories {
	maven {
		url = "https://maven.terraformersmc.com/releases"
		name = "TerraformersMC"
	}
	exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
	maven {
		url = 'https://maven.wispforest.io'
		name = 'WispForest'
	}
}

dependencies {

	// JUint
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

	// Minecraft
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier 'intermediary-v2' }
	modImplementation libs.quilt.loader

	// QSL / Fabric compat API
	modImplementation libs.quilted.fabric.api

	// ModMenu support at runtime
	modRuntimeOnly "com.terraformersmc:modmenu:6.2.1"

	// Xaero's Minimap is used for waypoint rendering
    modImplementation "maven.modrinth:xaeros-minimap:23.4.0_Fabric_${libs.versions.minecraft.get()}"

	// OWO Lib
	modImplementation "io.wispforest:owo-lib:${project.owo_version}"
    annotationProcessor "io.wispforest:owo-lib:${project.owo_version}"
    include "io.wispforest:owo-sentinel:${project.owo_version}"
}

processResources {
	inputs.property 'version', version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	withSourcesJar()
	// withJavadocJar()
}

task buildRustLinux_x86(type: Exec) {
	commandLine "cross", "build", "--target", "x86_64-unknown-linux-gnu", "--release"

	doLast {
		copy {
			from "target/x86_64-unknown-linux-gnu/release/lib${project.native_library_name}.so"
			into "build/resources/main/native/linux/x86_64"
		}
	}
}

task buildRustWindows_x86(type: Exec) {
	commandLine "cross", "build", "--target", "x86_64-pc-windows-gnu", "--release"

	doLast {
		copy {
			from "target/x86_64-pc-windows-gnu/release/${project.native_library_name}.dll"
			into "build/resources/main/native/windows/x86_64"
		}
	}
}

task buildRust(type: Jar) {
	dependsOn buildRustLinux_x86
	dependsOn buildRustWindows_x86
}

// The JAR needs to contain the built native library files
jar {
	dependsOn buildRust

	// Copy the license to the JAR
	from('LICENSE') {
		rename { "${it}_${archivesBaseName}" }
	}

	// // Copy the native library files to the JAR
	// into ("native/linux/x86_64") {
	// 	from fileTree(dir: "target/x86_64-unknown-linux-gnu/release", include: "*.so")
	// }
	// into ("native/windows/x86_64") {
	// 	from fileTree(dir: "target/x86_64-pc-windows-gnu/release", include: "*.dll")
	// }
}


// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
	}
}

test {
    useJUnitPlatform()
}
